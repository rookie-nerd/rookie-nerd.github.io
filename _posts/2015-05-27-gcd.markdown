---
layout: post
title:  "GCD技术详解"
date:   2015-05-27 16:14:43
categories: objective-c
---

# 背景介绍

## 并发简介

讲GCD就必须讲并发，因为GCD就是为并发而生的。并发就是同一时间执行多个任务。可以是单核CPU上通过时间分片的方式实现，也可以是多核CPU上真正的并发执行来实现。

iOS和OS X的并发编程API从低级到高级分别是pthread，NSThread，GCD，NSOperation。我们在选用的时候应该从高到低选用，保证代码并发模型的简单。



## GCD简介

GCD全称Grand Central Dispatch，其包括语言特性，运行时库以及系统级别的增强，其是在OS X 10.6以及iOS 4引入的。通过GCD能大大的提升多核iOS和OS X设备上并发代码的执行效率。

使用GCD之后，就不需要和threads直接打交道了，只需要在队列中添加block就好了，GCD管理了线程池，由其根据系统资源来决定使用哪个特定线程。这样的好处在于，线程现在由中央控制，不会出现太多线程的问题，而且线程的使用也可以更有效。

这种方式改变了并发编程思想，以前，我们需要面向线程来编程，而现在我们则面向队列来编程。面向队列编程只需要关注任务的设计，而不用再考虑线程的创建和管理，明显要简单的多。


### 为什么要有GCD

随着多核CPU的出现，如何更好的使用多核CPU成为最主要的问题。传统的方式是创建多个线程，这种方式最大的问题是线程数不能根据核的数目的多少进行有效的伸缩。计算当前可用的核的数目对于使用thread的应用程序来说是非常困难的事情。

iOS和OS X提供了足够简单的解决方案：GCD和Operation Queues。其解决思路主要是**将线程管理的代码移到系统级别，使用者只需要定义任务并将他们放到合适的队列**。


### Dispatch Queues

GCD提供了**3**种不同的队列:

+ 主队列
	- 全局可获取的串行队列，运行在主线程（Thread 0）
+ 并发队列
	- 任务按照他们被加入队列的顺序执行
	- 不用等待前面的任务完成，可以尽可能多的开始任务执行
	- GCD提供了4中全局并发队列
	- 用户自定义并发队列

{% highlight objective-c %}
// GCD提供的4中全局并发队列
#define DISPATCH_QUEUE_PRIORITY_HIGH        2
#define DISPATCH_QUEUE_PRIORITY_DEFAULT     0
#define DISPATCH_QUEUE_PRIORITY_LOW         (-2)
#define DISPATCH_QUEUE_PRIORITY_BACKGROUND  INT16_MIN

dispatch_queue_t aQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
{% endhighlight %}

{% highlight objective-c %}
// 用户自定义并发队列
// OS X v10.7 and later or iOS 4.3 and later
#define DISPATCH_QUEUE_SERIAL 
#define DISPATCH_QUEUE_CONCURRENT

dispatch_queue_t queue;
queue = dispatch_queue_create("com.example.MyQueue", DISPATCH_QUEUE_CONCURRENT);
{% endhighlight %}	

+ 串行队列
	- 任务按照他们被加入队列的顺序执行
	- 每次只能执行一个任务，只有上一个任务完成了，下一个任务才能开始

{% highlight objective-c %}
// 用户自定义并发队列
// OS X v10.7 before or iOS 4.3 before
dispatch_queue_t queue;
queue = dispatch_queue_create("com.example.MyQueue", NULL);
{% endhighlight %}

{% highlight objective-c %}
// 用户自定义并发队列
// OS X v10.7 and later or iOS 4.3 and later
#define DISPATCH_QUEUE_SERIAL 
#define DISPATCH_QUEUE_CONCURRENT

dispatch_queue_t queue;
queue = dispatch_queue_create("com.example.MyQueue", DISPATCH_QUEUE_SERIAL);
{% endhighlight %}

### Dispatch groups

dispatch groups提供了一种同步机制，可以实现某个任务的执行依赖于其他任务的完成。


### Dispatch semaphores

dispatch semaphore类似于传统的信号量，作用也类似。


### Dispatch Sources




# BULLSHIT
灵活性导致复杂度和责任混乱

+ [Low-Level Concurrency APIs](http://www.objc.io/issue-2/low-level-concurrency-apis.html)



# 其他

## Operation Queues
cocoa operations是采用面向对象的方式封装异步任务。他们可以自己执行，也可以结合operation queue来执行。关于操作队列详细信息请参考[Operation Queues](https://developer.apple.com/library/mac/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html)。



# 参考

* [concurrency-apis-and-pitfalls](http://www.objc.io/issue-2/concurrency-apis-and-pitfalls.html)
* [Grand Central Dispatch (GCD) Reference](https://developer.apple.com/library/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html)
* [ConcurrencyProgrammingGuide](https://developer.apple.com/library/mac/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091)

{% highlight smalltalk %}
NSString *testString = [[NSString alloc] init];
{% endhighlight %}

{% highlight c %}
int i = 0;
print("%d\n", i);
{% endhighlight %}